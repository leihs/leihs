%form#filter_panel
  %input{type: :hidden, name: 'filter[sort_by]', value: @filter['sort_by']}
  %input{type: :hidden, name: 'filter[sort_dir]', value: @filter['sort_dir']}

  .form-group
    %b
      %i.fa.fa-search
      = _('Search')
    %ul
      %input.form-control{name: 'filter[search]', placeholder: _('Search'), value: @filter['search'], autocomplete: :off}

  .form-group
    %b
      %i.fa.fa-calendar
      = _('Budget periods')
    %ul
      %select{name: 'filter[budget_period_ids][]', multiple: true}
        - Procurement::BudgetPeriod.order(end_date: :desc).each do |budget_period|
          %option{value: budget_period.id, selected: @filter['budget_period_ids'].map(&:to_i).include?(budget_period.id)}= budget_period

  .form-group
    %b
      %i.fa.fa-outdent
      = _('Categories')
    %ul
      %select{name: 'filter[category_ids][]', multiple: true}
        - Procurement::MainCategory.with_categories.each do |main_category|
          %optgroup{label: main_category.name}
            - main_category.categories.each do |category|
              %option{value: category.id, selected: @filter['category_ids'].map(&:to_i).include?(category.id)}
                = category.name

  - if procurement_inspector_or_admin?
    .form-group
      %b
        %i.fa.fa-tasks
        = _('Special filters')
      %ul
        - if procurement_requester?
          %label
            %input{type: :checkbox, name: "user_id", value: current_user.id, checked: @filter['user_id'] == current_user.id}
            .label.label-default= _('Only my own requests')
        - if Procurement::Category.inspector_of_any_category? current_user
          %label
            %input{type: :checkbox, name: "filter[inspectable_categories]", value: '1', checked: @filter['inspectable_categories'] == '1'}
            .label.label-default= _('Only my own categories')
        %label
          %input{type: :checkbox, name: "filter[categories_with_requests]", value: '1', checked: @filter['categories_with_requests'] == '1'}
          .label.label-default= _('Only categories with requests')

    .form-group
      %b
        %i.fa.fa-sitemap
        = _('Organisations')
      %ul
        %select{name: 'filter[organization_ids][]', multiple: true}
          - Procurement::Organization.departments.each do |department|
            %optgroup{label: department.name}
              - department.children.each do |organization_unit|
                %option{value: organization_unit.id, selected: @filter['organization_ids'].map(&:to_i).include?(organization_unit.id)}
                  = organization_unit.name

  .form-group
    %b
      %i.fa.fa-sort-amount-asc
      = _('Priority')
    %ul
      - ['High', 'Normal'].each do |priority|
        %label
          %input{type: :checkbox, name: "filter[priorities][]", value: priority.downcase, checked: @filter['priorities'].include?(priority.downcase)}
          .label.label-default= _(priority)

  - if procurement_inspector_or_admin?
    .form-group
      %b
        %i.fa.fa-sort-amount-asc
        = _("Inspector's priority")
      %ul
        - ['Mandatory', 'High', 'Medium', 'Low'].each do |inspector_priority|
          %label
            %input{type: :checkbox, name: "filter[inspector_priorities][]", value: inspector_priority.downcase, checked: @filter['inspector_priorities'].include?(inspector_priority.downcase)}
            .label.label-default= _(inspector_priority)

  .form-group
    %b
      %i.fa.fa-code-fork
      = _('State of Request')
    %ul
      - Procurement::Request::STATES.each do |state|
        - next if state == :in_inspection and procurement_inspector_or_admin?
        %li
          %label
            %input{type: :checkbox, name: "filter[states][]", value: state, checked: @filter['states'].map(&:to_sym).include?(state)}
            .label{class: label_class(state)}= _(state.to_s.humanize)

%br
%button.btn.btn-primary{type: :submit, name: 'format', value: 'csv', form: 'filter_panel'}
  %i.fa.fa-table
  = _('CSV export')
%br
%br
%button.btn.btn-primary{type: :submit, name: 'format', value: 'xlsx', form: 'filter_panel'}
  %i.fa.fa-table
  = _('Excel export')

:coffeescript
  $(document).ready ->
    currentRequest = null
    timeoutId = null
    $('form#filter_panel').on('ajax:beforeSend', (e, xhr, settings)->
      $('#filter_target').addClass('transparency')
      currentRequest.abort() if (currentRequest)
      currentRequest = xhr
      settings.url = settings.url.replace('&format=csv', '')
    ).on('ajax:complete', (e, data, status, xhr) ->
      $(this).removeAttr("data-remote").removeData('remote')
      $('#filter_target').html(data.responseText).removeClass('transparency')
    ).keydown((e)->
      charCode = e.charCode || e.keyCode || e.which
      if charCode == 13
        return false
      else if (charCode >= 65 and charCode <= 90) or
        (charCode >= 48 and charCode <= 57) or
        (charCode >= 96 and charCode <= 111) or
         charCode == 8
        clearTimeout(timeoutId) if timeoutId
        timeoutId = setTimeout =>
          $(this).data('remote', true).submit()
        , 400
    ).on('change', (event)->
      if event.target.name != 'filter[search]' and event.target.name != 'filter[category_ids][]'
        $(this).data('remote', true).submit()
    ).change()

    $("#filter_panel select").multiselect(
      includeSelectAllOption: true
      enableClickableOptGroups: true
      selectAllText: "#{_('Select all')}"
      nonSelectedText: "#{_('None selected')}"
      allSelectedText: "#{_('All selected')}"
      nSelectedText: " #{_('selected')}"
      onChange: -> $('form#filter_panel').data('remote', true).submit()
    )
